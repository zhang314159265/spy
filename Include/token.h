// should be autogenerated

#ifndef Py_TOKEN_H
#define Py_TOKEN_H

#define ENDMARKER 0
#define NAME 1
#define NUMBER 2
#define STRING 3
#define NEWLINE 4
#define INDENT 5
#define DEDENT 6
#define LPAR 7
#define RPAR 8
#define COLON 11
#define COMMA 12
#define PLUS 14
#define EQUAL 22
#define DOT 23
#define PLUSEQUAL 36
#define OP 54
#define TYPE_IGNORE 57

const char * const _PyParser_TokenNames[] = {
	[ENDMARKER] = "ENDMARKER",
	[NAME] = "NAME",
	[STRING] = "STRING",
	[NEWLINE] = "NEWLINE",
	[LPAR] = "LPAR",
	[RPAR] = "RPAR",
	[OP] = "OP",
};

const char *_get_token_name(int tok) {
	if (tok >= ARRAY_SIZE(_PyParser_TokenNames) || !_PyParser_TokenNames[tok]) {
		fatal("unknown %d", tok);
	}
	return _PyParser_TokenNames[tok];
}

// defined in cpy/Parser/token.c
int
PyToken_OneChar(int c1) {
	switch (c1) {
	case '+': return PLUS;
	case '(': return LPAR;
	case ')': return RPAR;
	case ':': return COLON;
	case '=': return EQUAL;
	case ',': return COMMA;
	}
	fatal("Unhandled OneChar token %d ('%c')\n", c1, (char) c1);
	return OP;
}

int PyToken_TwoChars(int c1, int c2) {
	switch (c1) {
	case '+':
		switch (c2) {
		case '=': return PLUSEQUAL;
		}
		break;
	}
	return OP;
}

#endif
