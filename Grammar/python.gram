start: file

file[mod_ty]: a=[statements] ENDMARKER { _PyPegen_make_module(p, a) }

statements[asdl_stmt_seq*]: a=statement+ { (asdl_stmt_seq*) _PyPegen_seq_flatten(p, a) }

statement[asdl_stmt_seq*]: a=compound_stmt { (asdl_stmt_seq*) _PyPegen_singleton_seq(p, a) } | a[asdl_stmt_seq*]=simple_stmts {a}

compound_stmt[stmt_ty]:
	| &'def' function_def
	| &'if' if_stmt
	| &'for' for_stmt
	| &'while' while_stmt

while_stmt[stmt_ty]:
	| 'while' a=named_expression ':' b=block c=[else_block] { _PyAST_While(a, b, c) }

if_stmt[stmt_ty]:
	| 'if' a=named_expression ':' b=block c=[else_block] {
		_PyAST_If(a, b, c)
	}

else_block[asdl_stmt_seq*]:
	| 'else' &&':' b=block {b}

named_expression[expr_ty]:
	| expression !':='

for_stmt[stmt_ty]:
	| 'for' t=star_targets 'in' ~ ex=star_expressions ':' b=block {
		_PyAST_For(t, ex, b, NULL);
	}

function_def[stmt_ty]:
	| function_def_raw

function_def_raw[stmt_ty]:
	| 'def' n=NAME '(' params=[params] ')' ':' b=block {
			_PyAST_FunctionDef(n->v.Name.id,
				(params) ? params : CHECK(arguments_ty, _PyPegen_empty_arguments(p)), b, NULL, NULL)
	}

block[asdl_stmt_seq*] (memo):
	| NEWLINE INDENT a=statements DEDENT {a}

params[arguments_ty]:
	| parameters

parameters[arguments_ty]:
	| a[asdl_arg_seq*]=param_no_default+ {
		_PyPegen_make_arguments(p, NULL, NULL, a, NULL, NULL)
	}

param_no_default[arg_ty]:
	| a=param &')' {
		_PyPegen_add_type_comment_to_arg(p, a, NULL) }

param[arg_ty]: a=NAME {
	_PyAST_arg(a->v.Name.id, NULL, NULL) }

simple_stmts[asdl_stmt_seq*]: a=simple_stmt !';' NEWLINE {
	(asdl_stmt_seq*) _PyPegen_singleton_seq(p, a) }

simple_stmt[stmt_ty] (memo):
	| assignment
	| &'return' return_stmt
	| e=primary { _PyAST_Expr(e) }
	| 'break' { _PyAST_Break() }

return_stmt[stmt_ty]:
	| 'return' a=[star_expressions] { _PyAST_Return(a) }

star_expressions[expr_ty]:
	| star_expression

star_expression[expr_ty] (memo):
	| expression

# TODO follow cpy
expression[expr_ty] (memo): comparison

comparison[expr_ty]:
	| a=bitwise_or b=compare_op_bitwise_or_pair+ {
		_PyAST_Compare(
			a,
			CHECK(asdl_int_seq*, _PyPegen_get_cmpops(p, b)),
			CHECK(asdl_expr_seq*, _PyPegen_get_exprs(p, b)))
	}
	| bitwise_or

compare_op_bitwise_or_pair[CmpopExprPair*]:
	| eq_bitwise_or
	| lt_bitwise_or

eq_bitwise_or[CmpopExprPair*]: '==' a=bitwise_or { _PyPegen_cmpop_expr_pair(p, Eq, a) }

lt_bitwise_or[CmpopExprPair*]: '<' a=bitwise_or { _PyPegen_cmpop_expr_pair(p, Lt, a) }

bitwise_or[expr_ty]:
	| sum

sum[expr_ty]:
	| a=sum '+' b=term { _PyAST_BinOp(a, Add, b) }
	| a=sum '-' b=term { _PyAST_BinOp(a, Sub, b) }
	| term

term[expr_ty]:
	| a=term '*' b=factor { _PyAST_BinOp(a, Mult, b) }
	| a=term '%' b=factor { _PyAST_BinOp(a, Mod, b) }
	| a=term '/' b=factor { _PyAST_BinOp(a, Div, b) }
	| a=term '//' b=factor { _PyAST_BinOp(a, FloorDiv, b) }
	| factor

factor[expr_ty] (memo):
	| power

power[expr_ty]:
	| a=primary '**' b=factor { _PyAST_BinOp(a, Pow, b) }
	| primary

assignment[stmt_ty]:
	| a[asdl_expr_seq*]=(z=star_targets '=' {z})+ b=star_expressions !'=' {
			_PyAST_Assign(a, b, NULL)
		}
	| a=single_target b=augassign ~ c=star_expressions {
		_PyAST_AugAssign(a, b->kind, c);
	}

single_target[expr_ty]:
	| a=NAME { _PyPegen_set_expr_context(p, a, Store) }

augassign[AugOperator*]:
	| '+=' { _PyPegen_augoperator(p, Add) }

star_targets[expr_ty]:
	| a=star_target !',' {a}

star_target[expr_ty] (memo):
	| target_with_star_atom

target_with_star_atom[expr_ty] (memo):
	| star_atom

star_atom[expr_ty]:
	| a=NAME { _PyPegen_set_expr_context(p, a, Store) }

primary[expr_ty]:
	| a=primary '.' b=NAME { _PyAST_Attribute(a, b->v.Name.id, Load) }
	| a=primary '(' b=[arguments] ')' {
		_PyAST_Call(a,
			(b) ? ((expr_ty) b)->v.Call.args : NULL,
			(b) ? ((expr_ty) b)->v.Call.keywords : NULL) }
	| atom

arguments[expr_ty]: a[asdl_expr_seq*]=','.expression+ {
		_PyPegen_collect_call_seqs(p, a, NULL);
	}

atom[expr_ty]:
	| NAME
	| 'True' { _PyAST_Constant(Py_True) }
	| NUMBER
	| a=STRING { _PyPegen_concatenate_strings(p, _PyPegen_singleton_seq(p, a)) }
	| &'(' (tuple | group)
	| &'[' list

list[expr_ty]:
	| '[' a=[star_named_expressions] ']' { _PyAST_List(a, Load) }

group[expr_ty]:
	| '(' a=named_expression ')' { a }

tuple[expr_ty]:
	| '(' a=[y=star_named_expression ',' z=[star_named_expressions] { _PyPegen_seq_insert_in_front(p, y, z) } ] ')' {
		_PyAST_Tuple(a, Load)
	}

star_named_expressions[asdl_expr_seq*]: a[asdl_expr_seq*]=','.star_named_expression+ [','] { a}

star_named_expression[expr_ty]:
	| '*' a=bitwise_or { _PyAST_Starred(a, Load) }
	| named_expression
